
TP4-CDyM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ca  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ae  00000000  00000000  00000b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000318  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include "PWM.h"

int main(void)
{
	setupPWM();
  90:	0e 94 4e 00 	call	0x9c	; 0x9c <setupPWM>
	setupTimer1CTC();
  94:	0e 94 a1 00 	call	0x142	; 0x142 <setupTimer1CTC>
	sei();
  98:	78 94       	sei
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0xa>

0000009c <setupPWM>:
volatile uint8_t ocrValue = 0;
volatile uint8_t adjustLED = 0;

void setupPWM() {
	// Configuración para Timer0 canal A (LED rojo) y canal B (LED verde)
	DDRD |= (1 << PORTD6) | (1 << PORTD5); //Canal OCR0A y OCR0B
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 66       	ori	r24, 0x60	; 96
  a0:	8a b9       	out	0x0a, r24	; 10
	OCR0A = 0x00;
  a2:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00;
  a4:	18 bc       	out	0x28, r1	; 40
	TCCR0A |= (1 << WGM00) | (1 << WGM01) | (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0); // Modo PWM invertido de 8 bits, Fast PWM en OC0A y OC0B
  a6:	84 b5       	in	r24, 0x24	; 36
  a8:	83 6f       	ori	r24, 0xF3	; 243
  aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02); // preescalador de 256; frecuencia de 122Hz
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	85 bd       	out	0x25, r24	; 37
	
	// PROBABLEMENTE SE BORRE Y SE HAGA POR SOFT
	 // Configuración para Timer1 (LED azul)
	 DDRB |= (1 << PORTB1); //Canal OCR1A
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	84 b9       	out	0x04, r24	; 4
	 TCCR1A |= (1 << WGM12) | (1 << WGM10) | (1 << COM1A1) | (1 << COM1A0); // Modo PWM de 8 bits (modo 5) para Timer1, Fast PWM en OC1A
  b8:	e0 e8       	ldi	r30, 0x80	; 128
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	89 6c       	ori	r24, 0xC9	; 201
  c0:	80 83       	st	Z, r24
	 TCCR1B |= (1 << CS12); // preescalador de 256; frecuencia de 122Hz
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <setRGBColor>:

}

void setRGBColor() {
	if (adjustLED >= 10){ //Se prende
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	8a 30       	cpi	r24, 0x0A	; 10
  d4:	d8 f0       	brcs	.+54     	; 0x10c <setRGBColor+0x3e>
		// Ajustar brillo del LED rojo
		ocrValue = OCR0A + REDSHADE;
  d6:	87 b5       	in	r24, 0x27	; 39
  d8:	89 5e       	subi	r24, 0xE9	; 233
  da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ocrValue>
		OCR0A = ocrValue;
  de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ocrValue>
  e2:	87 bd       	out	0x27, r24	; 39

		// Ajustar brillo del LED verde
		ocrValue = OCR0A + GREENSHADE;
  e4:	87 b5       	in	r24, 0x27	; 39
  e6:	8e 5f       	subi	r24, 0xFE	; 254
  e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ocrValue>
		OCR0B = ocrValue;
  ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ocrValue>
  f0:	88 bd       	out	0x28, r24	; 40

		//PROBABLEMENTE SE HAGA POR SOFT
		// Ajustar brillo del LED azul
		ocrValue = OCR1A + BLUESHADE;
  f2:	e8 e8       	ldi	r30, 0x88	; 136
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	91 81       	ldd	r25, Z+1	; 0x01
  fa:	84 5f       	subi	r24, 0xF4	; 244
  fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ocrValue>
		OCR1A = ocrValue;
 100:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ocrValue>
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	91 83       	std	Z+1, r25	; 0x01
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret
	}else{ //Se apaga
		// Ajustar brillo del LED rojo
		ocrValue = OCR0A - REDSHADE;
 10c:	87 b5       	in	r24, 0x27	; 39
 10e:	87 51       	subi	r24, 0x17	; 23
 110:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ocrValue>
		OCR0A = ocrValue;
 114:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ocrValue>
 118:	87 bd       	out	0x27, r24	; 39

		// Ajustar brillo del LED verde
		ocrValue = OCR0A - GREENSHADE;
 11a:	87 b5       	in	r24, 0x27	; 39
 11c:	82 50       	subi	r24, 0x02	; 2
 11e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ocrValue>
		OCR0B = ocrValue;
 122:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ocrValue>
 126:	88 bd       	out	0x28, r24	; 40

		//PROBABLEMENTE SE HAGA POR SOFT
		// Ajustar brillo del LED azul
		ocrValue = OCR1A - BLUESHADE;
 128:	e8 e8       	ldi	r30, 0x88	; 136
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	91 81       	ldd	r25, Z+1	; 0x01
 130:	8c 50       	subi	r24, 0x0C	; 12
 132:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ocrValue>
		OCR1A = ocrValue;
 136:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ocrValue>
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	91 83       	std	Z+1, r25	; 0x01
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <setupTimer1CTC>:
Posiblemente haya que generar un PWM por software, asi liberamos el Timer1 y generamos  la interrupcion en modo CTC
*/

void setupTimer1CTC() {
	// Configurar Timer1 en modo CTC con prescaler 256
	TCCR1A = 0; // Desactivar las salidas en modo CTC
 142:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS12); // Modo CTC con prescaler 256
 146:	8c e0       	ldi	r24, 0x0C	; 12
 148:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 6250; // Establecer el valor de comparación para generar una interrupción cada 100 ms
 14c:	8a e6       	ldi	r24, 0x6A	; 106
 14e:	98 e1       	ldi	r25, 0x18	; 24
 150:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 154:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A); // Habilitar la interrupción de comparación de Timer1
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 15e:	08 95       	ret

00000160 <__vector_11>:
}

// Rutina de interrupción del Timer1 (CTC)
ISR(TIMER1_COMPA_vect) {
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	interruptCount++;  // Incrementar el contador de interrupciones
 182:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <interruptCount>
 186:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <interruptCount+0x1>
 18a:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <interruptCount+0x2>
 18e:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <interruptCount+0x3>
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	a1 1d       	adc	r26, r1
 196:	b1 1d       	adc	r27, r1
 198:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <interruptCount>
 19c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <interruptCount+0x1>
 1a0:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <interruptCount+0x2>
 1a4:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <interruptCount+0x3>

	// Si el contador de interrupciones llega a 2 (2 segundos), hacer que el LED parpadee
	if (interruptCount >= 2) {
 1a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <interruptCount>
 1ac:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <interruptCount+0x1>
 1b0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <interruptCount+0x2>
 1b4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <interruptCount+0x3>
 1b8:	02 97       	sbiw	r24, 0x02	; 2
 1ba:	a1 05       	cpc	r26, r1
 1bc:	b1 05       	cpc	r27, r1
 1be:	a8 f0       	brcs	.+42     	; 0x1ea <__vector_11+0x8a>
		adjustLED++;
 1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(adjustLED>=20){
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	84 31       	cpi	r24, 0x14	; 20
 1d0:	10 f0       	brcs	.+4      	; 0x1d6 <__vector_11+0x76>
			adjustLED=0;
 1d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		setRGBColor(); // Alternar el estado del LED
 1d6:	0e 94 67 00 	call	0xce	; 0xce <setRGBColor>
		interruptCount = 0;  // Reiniciar el contador de interrupciones
 1da:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <interruptCount>
 1de:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <interruptCount+0x1>
 1e2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <interruptCount+0x2>
 1e6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <interruptCount+0x3>
	}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
