
TP4-CDyM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003a8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a00  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b2  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000564  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c4  00000000  00000000  00002209  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000023cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 80 00 	call	0x100	; 0x100 <main>
  9e:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
void initADC() {
	// Configurar el pin del LED como salida.
	//DDRB |= (1 << DDB5);
	
	// Habilitar el ADC y configurar el preescalador a 64 (125 kHz a 8 MHz de frecuencia de reloj).
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 68       	ori	r24, 0x86	; 134
  ae:	80 83       	st	Z, r24
	
	// Configurar la referencia de voltaje del ADC a AVCC con ajuste a la izquierda.
	ADMUX |=  (0 << REFS1) | (1 << REFS0);
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);
  ba:	80 81       	ld	r24, Z
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <leerADC_canal3>:

}

uint16_t leerADC_canal3() {
	// Seleccionar el canal 3 del ADC (PIN A3).
	ADMUX &= 0xF0; // Limpiar los bits MUX4:0 para configurarlos en 0.
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	80 83       	st	Z, r24
	ADMUX |= 0x03; // Establecer los bits MUX4:0 en 011 para seleccionar el canal 3 (PIN A3).
  cc:	80 81       	ld	r24, Z
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	80 83       	st	Z, r24

	// Iniciar una conversión ADC.
	ADCSRA |= (1 << ADSC);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24

	// Esperar hasta que se complete la conversión.
	while ((ADCSRA & (1 << ADIF))==0);
  dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e0:	84 ff       	sbrs	r24, 4
  e2:	fc cf       	rjmp	.-8      	; 0xdc <leerADC_canal3+0x1a>
	
	//Limpia el flag ADIF
	ADCSRA |= (1<<ADIF);
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	80 83       	st	Z, r24

	// Leer y retornar el resultado de la conversión.
	uint8_t lowByte = ADCL;
  ee:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint8_t highByte = ADCH;
  f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	uint16_t valorADC = (highByte << 8) | lowByte;
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	98 2f       	mov	r25, r24
  fa:	88 27       	eor	r24, r24

	Para obtener el resultado de la conversión de 10 bits (0 a 1023), primero se lee el valor de ADCL y luego se lee el valor de ADCH. El valor de ADCH 
	contiene los 2 bits más significativos de la conversión de 10 bits, mientras que el valor de ADCL contiene los 8 bits menos significativos. 
	Estos dos valores se combinan para obtener el resultado de la conversión de 10 bits.
	*/
  fc:	82 2b       	or	r24, r18
  fe:	08 95       	ret

00000100 <main>:
#include "ADC.h"
#define F_CPU 16000000UL

int main(void)
{	
	initADC();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	setupPWM();
 104:	0e 94 9a 00 	call	0x134	; 0x134 <setupPWM>
	setupTimer0CTC();
 108:	0e 94 47 01 	call	0x28e	; 0x28e <setupTimer0CTC>
	setupTimer2CTC();
 10c:	0e 94 92 01 	call	0x324	; 0x324 <setupTimer2CTC>
	sei();
 110:	78 94       	sei
	
	while (1)
	{
		valorLDR = leerADC_canal3();
 112:	0e 94 61 00 	call	0xc2	; 0xc2 <leerADC_canal3>
 116:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <valorLDR+0x1>
 11a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <valorLDR>
		if (valorLDR <= 1000){
 11e:	89 3e       	cpi	r24, 0xE9	; 233
 120:	93 40       	sbci	r25, 0x03	; 3
 122:	20 f4       	brcc	.+8      	; 0x12c <main+0x2c>
			haltTop = 1; // 2 seg
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <haltTop>
 12a:	f3 cf       	rjmp	.-26     	; 0x112 <main+0x12>
		} else {
			haltTop = 6; // 5 seg
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <haltTop>
 132:	ef cf       	rjmp	.-34     	; 0x112 <main+0x12>

00000134 <setupPWM>:
volatile uint8_t adjustLED = 0;
void PWM_soft_Update(void);

void setupPWM() {
	// Configuración para Timer1 canal A (LED azul) y canal B (LED verde)
	DDRB |= (1 << PORTB1) | (1 << PORTB2); //Canal OCR0A y OCR0B
 134:	84 b1       	in	r24, 0x04	; 4
 136:	86 60       	ori	r24, 0x06	; 6
 138:	84 b9       	out	0x04, r24	; 4
	OCR1A = 0xFF; //Arranca apagado
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 142:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0xFF; //Arranca apagado
 146:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 14a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1A |= (1 << WGM10) | (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1); // Modo PWM no-invertido de 8 bits en OC1A y OC1B
 14e:	e0 e8       	ldi	r30, 0x80	; 128
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	81 6a       	ori	r24, 0xA1	; 161
 156:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12); // preescalador de 256; frecuencia de 122Hz
 158:	e1 e8       	ldi	r30, 0x81	; 129
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8c 60       	ori	r24, 0x0C	; 12
 160:	80 83       	st	Z, r24
	//configuracion Mef
	stateFlag = UP;
 162:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <stateFlag>
	haltTop = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <haltTop>
	//Setup del PWM por soft
	PWM_START;
 16c:	84 b1       	in	r24, 0x04	; 4
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	84 b9       	out	0x04, r24	; 4
	PWM_OFF;
 172:	85 b1       	in	r24, 0x05	; 5
 174:	80 62       	ori	r24, 0x20	; 32
 176:	85 b9       	out	0x05, r24	; 5
 178:	08 95       	ret

0000017a <setRGBColor>:
}

void setRGBColor() {	
	switch(stateFlag){
 17a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <stateFlag>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	71 f1       	breq	.+92     	; 0x1de <setRGBColor+0x64>
 182:	30 f0       	brcs	.+12     	; 0x190 <setRGBColor+0x16>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	e1 f1       	breq	.+120    	; 0x200 <setRGBColor+0x86>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	09 f4       	brne	.+2      	; 0x18e <setRGBColor+0x14>
 18c:	60 c0       	rjmp	.+192    	; 0x24e <setRGBColor+0xd4>
 18e:	08 95       	ret
		case UP:
			
			// Ajustar brillo del LED azul
			ocrValue = OCR1A - BLUESHADE;
 190:	e8 e8       	ldi	r30, 0x88	; 136
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	91 81       	ldd	r25, Z+1	; 0x01
 198:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ocrValue>
			OCR1A = ocrValue;
 19c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ocrValue>
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	91 83       	std	Z+1, r25	; 0x01
 1a4:	80 83       	st	Z, r24
			// Ajustar brillo del LED verde
			ocrValue = OCR1B - GREENSHADE;
 1a6:	ea e8       	ldi	r30, 0x8A	; 138
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	91 81       	ldd	r25, Z+1	; 0x01
 1ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ocrValue>
			OCR1B = ocrValue;
 1b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ocrValue>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	91 83       	std	Z+1, r25	; 0x01
 1ba:	80 83       	st	Z, r24
			// Ajustar brillo del LED rojo
			PWM_DELTA -= REDSHADE;
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			if(!fader){
 1ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fader>
 1d2:	81 11       	cpse	r24, r1
 1d4:	5b c0       	rjmp	.+182    	; 0x28c <setRGBColor+0x112>
				stateFlag = HOLD;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <stateFlag>
 1dc:	08 95       	ret
			}
		break;
		
		case HOLD:
			if(!fader){
 1de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fader>
 1e2:	81 11       	cpse	r24, r1
 1e4:	53 c0       	rjmp	.+166    	; 0x28c <setRGBColor+0x112>
				if(++count == 2){
 1e6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <count>
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <count>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <setRGBColor+0x7c>
 1f4:	4b c0       	rjmp	.+150    	; 0x28c <setRGBColor+0x112>
					stateFlag = DOWN;
 1f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <stateFlag>
					count=0;
 1fa:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <count>
 1fe:	08 95       	ret
		
		case DOWN:
			
			
			// Ajustar brillo del LED azul
			ocrValue = OCR1A + BLUESHADE;
 200:	e8 e8       	ldi	r30, 0x88	; 136
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	91 81       	ldd	r25, Z+1	; 0x01
 208:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ocrValue>
			OCR1A = ocrValue;
 20c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ocrValue>
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	91 83       	std	Z+1, r25	; 0x01
 214:	80 83       	st	Z, r24
			// Ajustar brillo del LED verde
			ocrValue = OCR1B + GREENSHADE;
 216:	ea e8       	ldi	r30, 0x8A	; 138
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	91 81       	ldd	r25, Z+1	; 0x01
 21e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ocrValue>
			OCR1B = ocrValue;
 222:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ocrValue>
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	91 83       	std	Z+1, r25	; 0x01
 22a:	80 83       	st	Z, r24
			// Ajustar brillo del LED rojo
			PWM_DELTA += REDSHADE;
 22c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 230:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 23a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			
			if(!fader){
 23e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fader>
 242:	81 11       	cpse	r24, r1
 244:	23 c0       	rjmp	.+70     	; 0x28c <setRGBColor+0x112>
				stateFlag = OFF;
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <stateFlag>
 24c:	08 95       	ret
		break;
		
		case OFF:
		
				//TCCR0B &= ~(1<<CS02); //apago Timer0
				TCCR1B &= ~(1<<CS12); //apago Timer1
 24e:	e1 e8       	ldi	r30, 0x81	; 129
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	80 83       	st	Z, r24
				PORTB |= (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB5); //Enciendo LEDs
 258:	85 b1       	in	r24, 0x05	; 5
 25a:	86 62       	ori	r24, 0x26	; 38
 25c:	85 b9       	out	0x05, r24	; 5
			
			if(!fader){
 25e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fader>
 262:	81 11       	cpse	r24, r1
 264:	13 c0       	rjmp	.+38     	; 0x28c <setRGBColor+0x112>
				if(++count == haltTop){
 266:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <count>
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <count>
 270:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <haltTop>
 274:	89 13       	cpse	r24, r25
 276:	0a c0       	rjmp	.+20     	; 0x28c <setRGBColor+0x112>
					stateFlag = UP;
 278:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <stateFlag>
					count = 0;
 27c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <count>
					//TCCR0B |= (1<<CS02); //Enciendo Timer0
					TCCR1B |= (1<<CS12); //Enciendo Timer1
 280:	80 81       	ld	r24, Z
 282:	84 60       	ori	r24, 0x04	; 4
 284:	80 83       	st	Z, r24
					PORTB &= ~(1<<PORTB1) & ~(1<<PORTB2) & ~(1<<PORTB5); //Apago LEDs
 286:	85 b1       	in	r24, 0x05	; 5
 288:	89 7d       	andi	r24, 0xD9	; 217
 28a:	85 b9       	out	0x05, r24	; 5
 28c:	08 95       	ret

0000028e <setupTimer0CTC>:
	}
}

void setupTimer0CTC() {
	// Configurar Timer1 en modo CTC con prescaler 256
	TCCR0A = 0;  // Modo normal de operación
 28e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS02); // Prescaler 256
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;   // Inicializar el contador en 0
 294:	16 bc       	out	0x26, r1	; 38
	OCR0A = 63;  // Interrupción cada 4 ms (250Hz)
 296:	8f e3       	ldi	r24, 0x3F	; 63
 298:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1 << OCIE0A); // Habilitar la interrupción de comparación de Timer1 Canal A (PWM software)
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2a0:	08 95       	ret

000002a2 <PWM_soft_Update>:


//PWM por Software
void PWM_soft_Update(void){
	static uint16_t count = 0;
	if (count < PWM_DELTA) {
 2a2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 2a6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 2aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b2:	28 17       	cp	r18, r24
 2b4:	39 07       	cpc	r19, r25
 2b6:	20 f4       	brcc	.+8      	; 0x2c0 <PWM_soft_Update+0x1e>
		PWM_ON; // Establecer el pin en estado alto
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	8f 7d       	andi	r24, 0xDF	; 223
 2bc:	85 b9       	out	0x05, r24	; 5
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <PWM_soft_Update+0x24>
	} else {
		PWM_OFF; // Establecer el pin en estado bajo
 2c0:	85 b1       	in	r24, 0x05	; 5
 2c2:	80 62       	ori	r24, 0x20	; 32
 2c4:	85 b9       	out	0x05, r24	; 5
	}
	count = (count + 1) % 256; // Contador circular de 0 a 255
 2c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2ca:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	99 27       	eor	r25, r25
 2d2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 2da:	08 95       	ret

000002dc <__vector_14>:
	TIMSK0 = (1 << OCIE0A); // Habilitar la interrupción de comparación de Timer1 Canal A (PWM software)
}


// Interrupción del Timer0 para el PWM por Soft
ISR(TIMER0_COMPA_vect) {
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
	PWM_soft_Update();
 2fe:	0e 94 51 01 	call	0x2a2	; 0x2a2 <PWM_soft_Update>
}
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	7f 91       	pop	r23
 310:	6f 91       	pop	r22
 312:	5f 91       	pop	r21
 314:	4f 91       	pop	r20
 316:	3f 91       	pop	r19
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <setupTimer2CTC>:



void setupTimer2CTC() {
	// Configurar Timer1 en modo CTC con prescaler 256
	TCCR2A |= (1 << WGM01); // Seteo Modo CTC
 324:	e0 eb       	ldi	r30, 0xB0	; 176
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	82 60       	ori	r24, 0x02	; 2
 32c:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS02); // Prescaler 256
 32e:	e1 eb       	ldi	r30, 0xB1	; 177
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	84 60       	ori	r24, 0x04	; 4
 336:	80 83       	st	Z, r24
	OCR2A = 240; // Interrupción cada 4 ms (250Hz)
 338:	80 ef       	ldi	r24, 0xF0	; 240
 33a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1 << OCIE2A) ; // Habilitar la interrupción de comparación de Timer2 Canal A (Interrupcion periodica)
 33e:	e0 e7       	ldi	r30, 0x70	; 112
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	82 60       	ori	r24, 0x02	; 2
 346:	80 83       	st	Z, r24
 348:	08 95       	ret

0000034a <__vector_7>:
}

// Interrupción del Timer2 para la mef
ISR(TIMER2_COMPA_vect) {
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	2f 93       	push	r18
 356:	3f 93       	push	r19
 358:	4f 93       	push	r20
 35a:	5f 93       	push	r21
 35c:	6f 93       	push	r22
 35e:	7f 93       	push	r23
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	af 93       	push	r26
 366:	bf 93       	push	r27
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
	if(++fader>=250){
 36c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fader>
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fader>
 376:	8a 3f       	cpi	r24, 0xFA	; 250
 378:	10 f0       	brcs	.+4      	; 0x37e <__vector_7+0x34>
		fader = 0;
 37a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fader>
	}
	setRGBColor(); // Alterar el estado del LED
 37e:	0e 94 bd 00 	call	0x17a	; 0x17a <setRGBColor>
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
