
TP4-CDyM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000031c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098b  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c7  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ce  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042b  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000214  00000000  00000000  00001fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000021d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_11>
  30:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  88:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
#include "ADC.h"

void initADC() {
	// Configurar el pin del LED como salida.
	DDRB |= (1 << DDB5);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	80 62       	ori	r24, 0x20	; 32
  94:	84 b9       	out	0x04, r24	; 4
	
	// Configurar la referencia de voltaje del ADC a AVCC con ajuste a la izquierda.
	ADMUX |=  (0 << REFS1) | (1 << REFS0);
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);
  a0:	80 81       	ld	r24, Z
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	80 83       	st	Z, r24

	// Habilitar el ADC y configurar el preescalador a 64 (125 kHz a 8 MHz de frecuencia de reloj).
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 68       	ori	r24, 0x86	; 134
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <leerADC_canal3>:
}

uint16_t leerADC_canal3() {
	// Seleccionar el canal 3 del ADC (PIN A3).
	ADMUX &= 0xF0; // Limpiar los bits MUX4:0 para configurarlos en 0.
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	80 83       	st	Z, r24
	ADMUX |= 0x03; // Establecer los bits MUX4:0 en 011 para seleccionar el canal 3 (PIN A3).
  bc:	80 81       	ld	r24, Z
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	80 83       	st	Z, r24

	// Iniciar una conversión ADC.
	ADCSRA |= (1 << ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24

	// Esperar hasta que se complete la conversión.
	while ((ADCSRA & (1 << ADIF))==0);
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	84 ff       	sbrs	r24, 4
  d2:	fc cf       	rjmp	.-8      	; 0xcc <leerADC_canal3+0x1a>
	
	//Limpia el flag ADIF
	ADCSRA |= (1<<ADIF);
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	80 83       	st	Z, r24

	// Leer y retornar el resultado de la conversión.
	uint8_t lowByte = ADCL;
  de:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint8_t highByte = ADCH;
  e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	uint16_t valorADC = (highByte << 8) | lowByte;
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	98 2f       	mov	r25, r24
  ea:	88 27       	eor	r24, r24

	Para obtener el resultado de la conversión de 10 bits (0 a 1023), primero se lee el valor de ADCL y luego se lee el valor de ADCH. El valor de ADCH 
	contiene los 2 bits más significativos de la conversión de 10 bits, mientras que el valor de ADCL contiene los 8 bits menos significativos. 
	Estos dos valores se combinan para obtener el resultado de la conversión de 10 bits.
	*/
  ec:	82 2b       	or	r24, r18
  ee:	08 95       	ret

000000f0 <main>:
#include "ADC.h"

int main(void)
{	
	uint16_t valorLDR;
	initADC();
  f0:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	setupPWM();
  f4:	0e 94 90 00 	call	0x120	; 0x120 <setupPWM>
	setupTimer1CTC(1562);  //1562 = 2seg parpadeo; 3905 = 5seg parpadeo;
  f8:	8a e1       	ldi	r24, 0x1A	; 26
  fa:	96 e0       	ldi	r25, 0x06	; 6
  fc:	0e 94 ce 00 	call	0x19c	; 0x19c <setupTimer1CTC>
	sei();
 100:	78 94       	sei
	
	while (1)
	{	
		valorLDR = leerADC_canal3();
 102:	0e 94 59 00 	call	0xb2	; 0xb2 <leerADC_canal3>
		if (valorLDR == 1024){
 106:	81 15       	cp	r24, r1
 108:	94 40       	sbci	r25, 0x04	; 4
 10a:	29 f4       	brne	.+10     	; 0x116 <main+0x26>
			setupTimer1CTC(3905);
 10c:	81 e4       	ldi	r24, 0x41	; 65
 10e:	9f e0       	ldi	r25, 0x0F	; 15
 110:	0e 94 ce 00 	call	0x19c	; 0x19c <setupTimer1CTC>
 114:	f6 cf       	rjmp	.-20     	; 0x102 <main+0x12>
		} else {
			setupTimer1CTC(1562);
 116:	8a e1       	ldi	r24, 0x1A	; 26
 118:	96 e0       	ldi	r25, 0x06	; 6
 11a:	0e 94 ce 00 	call	0x19c	; 0x19c <setupTimer1CTC>
 11e:	f1 cf       	rjmp	.-30     	; 0x102 <main+0x12>

00000120 <setupPWM>:
volatile uint8_t adjustLED = 0;


void setupPWM() {
	// Configuración para Timer0 canal A (LED rojo) y canal B (LED verde)
	DDRD |= (1 << PORTD6) | (1 << PORTD5); //Canal OCR0A y OCR0B
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	80 66       	ori	r24, 0x60	; 96
 124:	8a b9       	out	0x0a, r24	; 10
	OCR0A = 0x00;
 126:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00;
 128:	18 bc       	out	0x28, r1	; 40
	TCCR0A |= (1 << WGM00) | (1 << WGM01) | (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0); // Modo PWM invertido de 8 bits, Fast PWM en OC0A y OC0B
 12a:	84 b5       	in	r24, 0x24	; 36
 12c:	83 6f       	ori	r24, 0xF3	; 243
 12e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02); // preescalador de 256; frecuencia de 122Hz
 130:	85 b5       	in	r24, 0x25	; 37
 132:	84 60       	ori	r24, 0x04	; 4
 134:	85 bd       	out	0x25, r24	; 37
	//Setup del PWM por soft
	PWM_START;
 136:	84 b1       	in	r24, 0x04	; 4
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	84 b9       	out	0x04, r24	; 4
	PWM_OFF;
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	85 b9       	out	0x05, r24	; 5
 142:	08 95       	ret

00000144 <setRGBColor>:

}

void setRGBColor() {
	if (adjustLED <= 20){ //Se prende
 144:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adjustLED>
 148:	85 31       	cpi	r24, 0x15	; 21
 14a:	a0 f4       	brcc	.+40     	; 0x174 <setRGBColor+0x30>
		// Ajustar brillo del LED rojo
		ocrValue = OCR0A + REDSHADE;
 14c:	87 b5       	in	r24, 0x27	; 39
 14e:	89 5e       	subi	r24, 0xE9	; 233
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ocrValue>
		OCR0A = ocrValue;
 154:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ocrValue>
 158:	87 bd       	out	0x27, r24	; 39

		// Ajustar brillo del LED verde
		ocrValue = OCR0A + GREENSHADE;
 15a:	87 b5       	in	r24, 0x27	; 39
 15c:	8e 5f       	subi	r24, 0xFE	; 254
 15e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ocrValue>
		OCR0B = ocrValue;
 162:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ocrValue>
 166:	88 bd       	out	0x28, r24	; 40
		
		// Ajustar brillo del LED azul
		PWM_DELTA += BLUESHADE;
 168:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PWM_DELTA>
 16c:	84 5f       	subi	r24, 0xF4	; 244
 16e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PWM_DELTA>
 172:	08 95       	ret
	}else{ //Se apaga
		// Ajustar brillo del LED rojo
		ocrValue = OCR0A - REDSHADE;
 174:	87 b5       	in	r24, 0x27	; 39
 176:	87 51       	subi	r24, 0x17	; 23
 178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ocrValue>
		OCR0A = ocrValue;
 17c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ocrValue>
 180:	87 bd       	out	0x27, r24	; 39

		// Ajustar brillo del LED verde
		ocrValue = OCR0A - GREENSHADE;
 182:	87 b5       	in	r24, 0x27	; 39
 184:	82 50       	subi	r24, 0x02	; 2
 186:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ocrValue>
		OCR0B = ocrValue;
 18a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ocrValue>
 18e:	88 bd       	out	0x28, r24	; 40

		// Ajustar brillo del LED azul
		PWM_DELTA -= BLUESHADE;
 190:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PWM_DELTA>
 194:	8c 50       	subi	r24, 0x0C	; 12
 196:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PWM_DELTA>
 19a:	08 95       	ret

0000019c <setupTimer1CTC>:
	}
}

void setupTimer1CTC(uint16_t outputCompare) { //outputCompare -> 1562 = 50ms; 3905 = 125ms;
 19c:	9c 01       	movw	r18, r24
	// Configurar Timer1 en modo CTC con prescaler 256
	TCCR1A = 0; // Desactivar las salidas en modo CTC
 19e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1 << WGM12) | (1 << CS12); // Modo CTC con prescaler 256
 1a2:	e1 e8       	ldi	r30, 0x81	; 129
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	9c 60       	ori	r25, 0x0C	; 12
 1aa:	90 83       	st	Z, r25
	OCR1B = outputCompare; // Interrupción cada 50 ms o cada 125 ms
 1ac:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1b0:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = 499; // Interrupción cada 16 ms (60Hz)
 1b4:	83 ef       	ldi	r24, 0xF3	; 243
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1B) | (1 << OCIE1A); // Habilitar la interrupción de comparación de Timer1 Canal A (PWM software), Canal B (Interrupcion periodica)
 1c0:	ef e6       	ldi	r30, 0x6F	; 111
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	86 60       	ori	r24, 0x06	; 6
 1c8:	80 83       	st	Z, r24
 1ca:	08 95       	ret

000001cc <__vector_12>:
}

// Interrupción del Timer1 (CTC)
ISR(TIMER1_COMPB_vect) {
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	adjustLED++;
 1ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adjustLED>
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adjustLED>
	setRGBColor(); // Alterar el estado del LED
 1f8:	0e 94 a2 00 	call	0x144	; 0x144 <setRGBColor>
	if(adjustLED>=40){
 1fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adjustLED>
 200:	88 32       	cpi	r24, 0x28	; 40
 202:	10 f0       	brcs	.+4      	; 0x208 <__vector_12+0x3c>
		adjustLED=0;
 204:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <adjustLED>
	}
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <PWM_soft_Update>:

//PWM por Software
void PWM_soft_Update(void){
	static uint8_t PWM_position = 0;
	
	if(++PWM_position>=PWM_DELTA){
 22a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 234:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <PWM_DELTA>
 238:	89 17       	cp	r24, r25
 23a:	30 f0       	brcs	.+12     	; 0x248 <PWM_soft_Update+0x1e>
		PWM_position=0;
 23c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		PWM_OFF;
 240:	85 b1       	in	r24, 0x05	; 5
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	85 b9       	out	0x05, r24	; 5
 246:	08 95       	ret
	}else{
		if(PWM_position<PWM_DELTA){
 248:	89 17       	cp	r24, r25
 24a:	20 f4       	brcc	.+8      	; 0x254 <PWM_soft_Update+0x2a>
			PWM_ON;
 24c:	85 b1       	in	r24, 0x05	; 5
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	85 b9       	out	0x05, r24	; 5
 252:	08 95       	ret
		}else{
			PWM_OFF;
 254:	85 b1       	in	r24, 0x05	; 5
 256:	8d 7f       	andi	r24, 0xFD	; 253
 258:	85 b9       	out	0x05, r24	; 5
 25a:	08 95       	ret

0000025c <__vector_11>:
		adjustLED=0;
	}
}

// Interrupción del Timer1 para el PWM por Soft
ISR(TIMER1_COMPA_vect) {
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	PWM_soft_Update();
 27e:	0e 94 15 01 	call	0x22a	; 0x22a <PWM_soft_Update>
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
